plugins {
  id "java"
  id "maven"
  id "com.diffplug.gradle.spotless" version "3.24.2"
  id "org.springframework.boot" version "2.4.2"
  id "io.spring.dependency-management" version "1.0.6.RELEASE"
  id "net.linguica.maven-settings" version "0.5"
  id "com.github.node-gradle.node" version "3.1.0"

  id "pmd"
  id "org.owasp.dependencycheck" version "5.3.0"
}

bootJar {
  launchScript()
  archiveBaseName = 'grades-and-transcripts'
}

group 'oakland.integration'
version = '1.1.2'
description = "Web App for Grades and Transcripts in uPortal"

repositories {
  mavenLocal()
  mavenCentral()
  maven {url 'https://repo.gradle.org/gradle/libs-releases'}
}

if (project.hasProperty('local')) {
  apply from: rootProject.file('gradle/profile_local.gradle');
  println 'Using profile: "local"'
} else {
  println 'Using profile: "default"'
}

node {
  // Version of node to use.
  version = '14.0.0'
  // Base URL for fetching node distributions (change if you have a mirror).
  distBaseUrl = 'https://nodejs.org/dist'
  // If true, it will download node using above parameters.
  // If false, it will try to use globally installed node.
  download = true
  // Set the work directory for unpacking node
  workDir = file("${project.buildDir}/nodejs")
  // Set the work directory where node_modules should be located

  // Set the work directory for Yarn
  npmWorkDir = file("${project.buildDir}/npm")

  nodeModulesDir = file("src/main/react")
}

task runBuild(type: NpmTask) {
  args = ['run', 'build']
}

task copyTask(type: Copy) {
  from 'src/main/react/build/static/'
  into 'src/main/resources/static'
}

tasks.withType(Test) {
  testLogging {
    exceptionFormat "full"
    events "skipped", "passed", "failed"
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << '-Xlint:unchecked'
  options.deprecation = true;
}

spotless {
  java {
    googleJavaFormat()
    importOrder 'edu', 'java', 'com org', ''
    removeUnusedImports()
    trimTrailingWhitespace()
  }
}

/* allows stdout and stderr to be displayed when running tests during build */
test {
  testLogging.showStandardStreams = true
  useJUnitPlatform()
}

sourceCompatibility = "11"
targetCompatibility = "11"

pmd {
  toolVersion = "6.21.0"
  ignoreFailures = "true"
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

  testCompile 'org.springframework.boot:spring-boot-starter-test'
}

clean.finalizedBy 'npm_install'
npm_install.finalizedBy 'runBuild'
runBuild.finalizedBy 'copyTask'
copyTask.finalizedBy 'spotlessApply'
